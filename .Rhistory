plot(dates0,x0sub,pch = 20)
abline(median(x0sub,na.rm = TRUE),lwd=TRUE)
abline(median(x0sub,na.rm = TRUE),lwd=2)
abline(a=median(x0sub,na.rm = TRUE),lwd=2)
abline(h=median(x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch = 20)
abline(h=median(x1sub,na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm = TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,by = "state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim = c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
with(mrg,segments(rep(1,52),mrg[,1],rep(2,52),mrg[,2]))
segments(rep(1,52),mrg[,1],rep(2,52),mrg[,2])
play()
?segments
nxt()
segments(rep(1,52),y0=mrg[,1],rep(2,52),mrg[,2])
segments(rep(1,52),y0=mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x<mrg$mean.y]
mrg[mrg$mean.x<mrg$mean.y,]
q()
print(subset(jsoned, name == "datasharing")$created_at)
source('~/Copy/Coursera/Data Science Specialization/Getting and Cleaning Data/W2Q1.R')
con<-url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode<-readLines(con)
close(con)
head(htmlCode)
nchar(htmlCode[c(10,20,30,100)])
q()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
13*4
1/13
1/52^4
0
3/13
0
2/51
.8*1.6/2
.64
mypdf
integrate(mypdf(1.6))
integrate(mypdf,0,1.6)
sqrt(.5*4)
.997*.001
(1-.001)*(1-.985)
.997*.001/(.997*.001+(1-.001)*(1-.985))
6!/6^6
1*2*3*4*5*6/6^6
(1+2+3+4+5+6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(dice_high*dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000),1000),1,mean))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/2/sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
q()
library(swirl)
swirl()
choose(5,3)*.8^3*.2^2
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^1
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^0
pbinom(quantile=2,size = 5,prob = .8,lower.tail = FALSE)
pbinom(size = 5,prob = .8,lower.tail = FALSE)
pbinom(2,size = 5,prob = .8,lower.tail = FALSE)
qnorm(.9)
qnorm(.1)
0
qnorm(.975,3,2)
1.96*2+3
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail = FALSE)
pnorm(.75,1020,50)
qnorm(.75,1030,50)
qnorm(.75,1020,50)
.53
.53
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
ppois(10,5*3)
?pbinom
qnorm(.95)
qnorm(.95,1100,75)
qnorm(.95,1100,75/10)
ppois(3,.5*5,lower.tail = FALSE)
ppois(4,.5*5,lower.tail = FALSE)
pbinom(3,5,.5)
q()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/5)
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
q()
library(swirl)
swirl()
11/12
deck
52
4/52
0
12/52
2/51
.64
.64
mypdf
integrate(mypdf,0,1.6)
sqrt(2)
.997*.001
(1-.985)*(1-.001)
.997*.001/((1-.985)*(1-.001)+.997*.001)
(1+2+3+4+5+6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)/2
integrate(myfunc, 0 ,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp$X*temp$Prob
temp[1,]*temp[2,]
sum(temp[1,]*temp[2,])
.75*.3/(.75*.3+.7*.48)
swirl()
choose(5,3)*.8^3*.2^2
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^0
pbinom(2,5,prob = .8,lower.tail = FALSE)
qnorm(.1)
0
qnorm(.975,3,2)
1.96*2+3
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(.75,1020,50,lower.tail = TRUE)
.53
.53
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*(1-.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
pnorm(70,80,10,lower.tail = TRUE)
qnorm(.95,1100,75)
qnorm(.95,1100,75/sqrt(100))
pbinom(4,5,.5,lower.tail = F)
pnorm(16,15,10/sqrt(100))-pnorm(16,15,10/sqrt(100))
pnorm(16,15,10/sqrt(100))-pnorm(14,15,10/sqrt(100))
ppois(10,5*3)
pbinom(3,5,.5,lower.tail = F)
swirl
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn+c(-1,1)*qt(.975,10-1)*mn/sqrt(10)
mn+c(-1,1)*qt(.975,10-1)*s/sqrt(10)
mn+c(-1,1)*qt(.975,10-1)*s/sqrt(10)
mn+c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
(8-1)*15.34^2+(21-1)*18.23
sp<-(8-1)*15.34^2+(21-1)*18.23
sp<-(8-1)*15.34^2+(21-1)*18.23^2
ns<-8-1+21-1
sp<-sqrt(sp/ns)
(132.86*(8-1)+127.44*(21-1))/ns+c(-1,1)*qt(.975,ns)*sp*sqrt(1/(8-1)+1/(21-1))
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp<-sqrt((var(g1)*(10-1)+var(g2)*(10-1))/(18))
sp<-sqrt((var(g1)*(10-1)+var(g2)*(10-1))/18)
sp<-sqrt((var(g1)*9+var(g2)*9)/18)
sp<-sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1,paired = F,var.equal = T)$conf
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num<-(15.34^2/8+18.23^2/21)^2
den<-(15.34^2/8)^2/(8-1)+(18.23^2/21)^2/(21-1)
mydf<-num/den
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
10/sqrt(100)
(32-30)/1
swirl()
?clear
q()
library(swirl)
swirl()
swirl()
1
q()
q()
library(swirl)
swirl()
32-30
swirl()
1
q()
library(swirl)
swirl()
pt(2.5,15,lower.tail = FALSE)
qnorm(.95)
install.packages(c("boot", "chron", "class", "cluster", "codetools", "dplyr", "foreign", "httpuv", "httr", "KernSmooth", "lattice", "manipulate", "maps", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plyr", "R6", "Rcpp", "RCurl", "rJava", "RMySQL", "rpart", "spatial", "stringi", "survival", "testthat", "XML"))
plot(fs)
ver
version
ggplot2
?t.test
qt(.975,8)
1100+c(-1,1)*qt(.975,9-1)*30/sqrt(9)
--2
--2*sqrt(9)/qt(.975,9-1)
k <- 1000xvals <- seq(-5, 5, length = k)myplot <- function(df){    d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),                    x = xvals,                    dist = factor(rep(c("Normal", "T"), c(k,k))))    g <- ggplot(d, aes(x = x, y = y))    g <- g + geom_line(size = 2, aes(colour = dist))    g}manipulate(myplot(mu), mu = slider(1, 20, step = 1))
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,dist = factor(rep(c("Normal", "T"), c(k,k))))
myplot <- function(df){
+ d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
+ dist = factor(rep(c("Normal", "T"), c(k,k))))
myplot <- function(df){    d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),                    x = xvals,                    dist = factor(rep(c("Normal", "T"), c(k,k))))    g <- ggplot(d, aes(x = x, y = y))    g <- g + geom_line(size = 2, aes(colour = dist))    g}manipulate(myplot(mu), mu = slider(1, 20, step = 1))
myplot <- function(df){    d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),                    x = xvals,                    dist = factor(rep(c("Normal", "T"), c(k,k))))    g <- ggplot(d, aes(x = x, y = y))    g <- g + geom_line(size = 2, aes(colour = dist))    g}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?manipulate
data(sleep)
head(sleep)
t.test(3-5,var.equal = F)$conf
install.packages("devtools")
devtools::install_github("hadley/plyr")
library(ggplot2)
x <- seq(-8,8, length = 2000)
dat <- data.frame(x=x, y=dnorm(x,sd=2))
g <- ggplot(dat, aes(x = x, y = y)) + geom_line(size = 1.5)+scale_y_continuous(limits=c(0,max(dat$y)))
g <- g + layer("area", mapping = aes( x=ifelse(x>qnorm(.95,sd=2),x,NA)), geom_params=list(fill="red",alpha=.5))
print(g)
library(ggplot2)
x <- seq(-8,8, length = 2000)
dat <- data.frame(x=x, y=dnorm(x,sd=2))
g <- ggplot(dat, aes(x = x, y = y)) + geom_line(size = 1.5)+scale_y_continuous(limits=c(0,max(dat$y)))
g <- g + layer("area", mapping = aes( x=ifelse(x>qnorm(.95,sd=2),x,NA)), geom_params=list(fill="red",alpha=.5))
print(g)
library(ggplot2)
x <- seq(-8,8, length = 2000)
dat <- data.frame(x=x, y=dnorm(x,sd=2))
g <- ggplot(dat, aes(x = x, y = y)) + geom_line(size = 1.5)+scale_y_continuous(limits=c(0,max(dat$y)))
g <- g + layer("area", mapping = aes( x=ifelse(x>qnorm(.95,sd=2),x,NA)), geom_params=list(fill="red",alpha=.5))
print(g)
library(swirl)
swirl()
10/sqrt(100)
32-30
(32-30)/(10/sqrt(16))
16-1
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin[8]
mybin[9]
mybin[7]
.035
.144
8
pt(q = 2.5,df = 15,lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size = 8,prob = .5,lower.tail = FALSE)
pbinom(7,size = 8,prob = .5,lower.tail = TRUE)
ppois(9,lambda = 5,lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z,mean = 30,lower.tail = FALSE)
pnorm(30+z,mean = 32,lower.tail = FALSE)
pnorm(30+z,mean = 32,sd = 1,lower.tail = FALSE)
pnorm(30+z*2,mean = 32,sd = 2,lower.tail = FALSE)
power.t.test(n = 16,delta = 2/4,sd = 1,type = "one.sample",alt="one.sided")$power
power.t.test(n = 16,delta = 2,sd = 4,type = "one.sample",alt="one.sided")$power
power.t.test(n = 16,delta = 100,sd = 200,type = "one.sample",alt="one.sided")$power
power.t.test(power = .8,delta = 2/4,sd = 1,type = "one.sample",alt="one.sided")$n
power.t.test(power = .8,delta = 2,sd = 4,type = "one.sample",alt="one.sided")$n
power.t.test(power = .8,delta = 100,sd = 200,type = "one.sample",alt="one.sided")$n
power.t.test(power = .8,n=26,sd = 1,type = "one.sample",alt="one.sided")$delta
power.t.test(power = .8,n=27,sd = 1,type = "one.sample",alt="one.sided")$delta
head(pValues)
sum(pValues<.05)
sum(p.adjust(pValues,method = "bonferroni")<.05)
sum(p.adjust(pValues,method = "BH")<.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
24/1000
24/500
table(p.adjust(pValues2,method = "bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method = "BH")<.05,trueStatus)
df<-(.6^2/10+.68^2/10)^2/((.6^2/10)^2/(10-1)+(.68^2/10)^2/(10-1))
3-5+c(1,-1)*qt(.975,df)*sqrt(.6^2/10-.68^2/10)
3-5+c(1,-1)*qt(.975,df)*sqrt(.6^2/10+.68^2/10)
s2<-((10-1)*.6^2+(10-1)*.68^2)/(10+10-2)
s<-sqrt(s2)
3-5+c(1,-1)*qt(.975,10+10-2)*s*sqrt(1/10+1/10)
s
df<-(.6/10+.68/10)^2/((.6/10)^2/(10-1)+(.68/10)^2/(10-1))
3-5+c(1,-1)*qt(.975,df)*sqrt(.6/10-.68/10)
3-5+c(1,-1)*qt(.975,df)*sqrt(.6/10+.68/10)
s<-sqrt(((9-1)*1.8^2+(9-1)*1.5^2)/(9+9-2))
-3-1+c(1,-1)*qnorm(.95)*s*sqrt(1/9+1/9)
-3-1+c(1,-1)*qnorm(.95,-1,s)*s*sqrt(1/9+1/9)
-3-1+c(1,-1)*qt(.95,9+9-2)*s*sqrt(1/9+1/9)
q()
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$DateTime<-ymd_hm(paste(data$date,data$interval))
setwd("~/Copy/Coursera/Data Science Specialization/Reproducible Research/Assignment1/RepData_PeerAssessment1")
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$DateTime<-ymd_hm(paste(data$date,data$interval))
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
#data$DateTime<-ymd_hm(paste(data$date,data$interval))
str(data)
ymd_hm("2012-10-01 0:0")
ymd_hm("2012-10-01 0:5")
ymd_hm("2012-10-01 0:05")
ymd_hm("2012-10-01 0:55")
ymd_hm("2012-10-01 10:55")
ymd_hm("2012-10-01 9:55")
ymd_hm(paste0("2012-10-01"," ",0,":",5))
ymd_hm(paste0("2012-10-01",0,":",5))
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$DateTime <- ymd_hm(paste0(data$date, " ", data$hour, ":", data$minute))
str(data)
head(data)
tail(data)
steps <- xtabs(steps ~ date, data)
hist(steps)
smean <- mean(steps)
smedian <- median(steps)
head(steps)
1+NA
?xtabs
hm(0:0)
hm("0:0")
hm("0:5")
hm("7:05")
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$time <- hm(paste0(data$hour, ":", data$minute))
data$DateTime <- ymd_hm(paste0(data$date, " ", data$time))
hm(paste0(0,":",5))
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$time <- hm(paste0(data$hour, ":", data$minute))
data$DateTime <- ymd_hm(paste(data$date, data$time))
head(data)
tail(data)
filename <- "activity.csv"
if(!file.exists(filename)) {
unzip("activity.zip")
}
data <- read.csv(filename)
data$date <- as.Date(data$date)
data$hour <- data$interval %/% 100
data$minute <- data$interval %% 100
library(lubridate)
data$time <- hm(paste0(data$hour, ":", data$minute))
data$DateTime <- ymd_hm(paste0(data$date, " ", data$hour, ":", data$minute))
head(data)
tail(data)
mean_steps <- xtabs(steps ~ time, data)
#plot()
mean_steps <- xtabs(mean(steps) ~ time, data)
str(data)
mean_steps <- xtabs(steps ~ interval, data)
#plot()
head(mean_steps)
str(mean_steps)
mean_steps <- xtabs(mean(steps) ~ interval, data)
#plot()
mean_steps <- xtabs(mean(steps ~ interval), data)
#plot()
mean_steps <- xtabs(steps ~ interval + mean, data)
